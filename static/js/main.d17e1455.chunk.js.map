{"version":3,"sources":["Card/Card.js","Draw/Draw.js","Config/Firebase/db_config.js","App.js","serviceWorker.js","index.js"],"names":["Card","sta","cap","img","className","src","alt","Draw","drawCard","props","onClick","this","React","Component","DB_CONFIG","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","componentDidMount","currentCards","state","cards","database","on","snap","push","id","key","val","setState","currentCard","getRandomCard","loaded","Math","floor","random","length","updateCard","app","firebase","initializeApp","ref","child","bind","top","scale","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mWAiCeA,G,MA7BF,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,IAAKC,EAAb,EAAaA,IAAb,OACX,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,OACb,sDACCH,EACD,6BACA,yBAAKI,IAAKF,EAAKG,IAAI,gBAGvB,yBAAKF,UAAU,cACb,yBAAKA,UAAU,OACb,8CACCF,EACD,6BACA,yBAAKG,IAAKF,EAAKG,IAAI,oBChBRC,G,iNAElBC,SAAW,WACV,EAAKC,MAAMD,Y,wEAKX,OACE,yBAAKJ,UAAU,mBACb,4BAAQA,UAAU,MAAOM,QAASC,KAAKH,UAAvC,qB,GAV0BI,IAAMC,YCJ3BC,EAAY,CACrBC,OAAQ,0CACRC,WAAY,yCACZC,YAAa,gDACbC,UAAW,yBACXC,cAAe,GACfC,kBAAmB,eACnBC,MAAO,uCC0EIC,G,kBAvEb,WAAYb,GAAQ,IAAD,8BACjB,4CAAMA,KAgBRc,kBAAoB,WAAO,IAEnBC,EADY,EAAKC,MAAfC,MAGR,EAAKC,SAASC,GAAG,eAAe,SAAAC,GAC9BL,EAAaM,KAAK,CAChBC,GAAIF,EAAKG,IACT/B,IAAK4B,EAAKI,MAAMhC,IAChBC,IAAK2B,EAAKI,MAAM/B,IAChBC,IAAK0B,EAAKI,MAAM9B,MAGlB,EAAK+B,SAAS,CACZR,MAAOF,EACPW,YAAa,EAAKC,cAAcZ,GAChCa,QAAQ,QAhCK,EAqCnBD,cAAgB,SAAAZ,GAEd,OADaA,EAAac,KAAKC,MAAMD,KAAKE,SAAWhB,EAAaiB,UAtCjD,EA0CnBC,WAAa,WAAO,IAEZlB,EADY,EAAKC,MAAfC,MAER,EAAKQ,SAAS,CACZC,YAAa,EAAKC,cAAcZ,MA3ClC,EAAKmB,IAAMC,IAASC,cAAc/B,GAClC,EAAKa,SAAW,EAAKgB,IAClBhB,WACAmB,MACAC,MAAM,SACT,EAAKL,WAAa,EAAKA,WAAWM,KAAhB,gBAElB,EAAKvB,MAAQ,CACXC,MAAO,GACPS,YAAa,GACbE,QAAQ,GAbO,E,sEAkDT,IAAD,EACyB1B,KAAKc,MAA7BY,EADD,EACCA,OAAQF,EADT,EACSA,YAChB,OACE,yBAAK/B,UAAU,OACb,kBAAC,IAAD,CAAQiC,OAAQA,EAAQY,IAAI,MAAMC,MAAO,MACvC,yBAAK9C,UAAU,WACb,kBAAC,EAAD,CACEH,IAAKkC,EAAYlC,IACjBC,IAAKiC,EAAYjC,IACjBC,IAAKgC,EAAYhC,OAGrB,yBAAKC,UAAU,aACb,kBAAC,EAAD,CAAMI,SAAUG,KAAK+B,oB,GAhEf9B,IAAMC,YCGJsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d17e1455.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Card.css';\n\nconst Card = ({ sta, cap, img }) => (\n  <div className=\"card-container\">\n    <div className=\"card\">\n      <div className=\"front\">\n        <div className=\"sta\">\n          <h1>what is the capital of</h1>\n          {sta}\n          <br />\n          <img src={img} alt=\"state pic\" />\n        </div>\n      </div>\n      <div className=\"front back\">\n        <div className=\"cap\">\n          <h1>the capital is</h1>\n          {cap}\n          <br />\n          <img src={img} alt=\"state pic\" />\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nCard.propTypes = {\n  sta: PropTypes.string,\n  cap: PropTypes.string,\n  img: PropTypes.string,\n};\n\nexport default Card;\n","import React from 'react';\nimport './Draw.css';\n\n\nexport default class Draw extends React.Component {\n\n   drawCard = () => {\n    this.props.drawCard();\n  }\n\n  render() {\n\n    return (\n      <div className=\"buttonContainer\">\n        <button className=\"btn\"  onClick={this.drawCard}>Select State</button>\n      </div>\n    )\n  }\n}\n","export const DB_CONFIG = {\n    apiKey: \"AIzaSyA3uJgSSi61wbcR4c03wRw59dY0MlumX-Q\",\n    authDomain: \"react-flashcards-13b93.firebaseapp.com\",\n    databaseURL: \"https://react-flashcards-13b93.firebaseio.com\",\n    projectId: \"react-flashcards-13b93\",\n    storageBucket: \"\",\n    messagingSenderId: \"895740558463\",\n    appId: \"1:895740558463:web:3d04a26acf244bd3\"\n  };\n","import React from 'react';\nimport './App.css';\nimport Loader from 'react-loader';\nimport firebase from 'firebase/app';\nimport Card from './Card/Card';\nimport Draw from './Draw/Draw';\nimport { DB_CONFIG } from './Config/Firebase/db_config.js';\nimport 'firebase/database';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.app = firebase.initializeApp(DB_CONFIG);\n    this.database = this.app\n      .database()\n      .ref()\n      .child('cards');\n    this.updateCard = this.updateCard.bind(this);\n\n    this.state = {\n      cards: [],\n      currentCard: {},\n      loaded: false,\n    };\n  }\n\n  componentDidMount = () => {\n    const { cards } = this.state;\n    const currentCards = cards;\n\n    this.database.on('child_added', snap => {\n      currentCards.push({\n        id: snap.key,\n        sta: snap.val().sta,\n        cap: snap.val().cap,\n        img: snap.val().img,\n      });\n\n      this.setState({\n        cards: currentCards,\n        currentCard: this.getRandomCard(currentCards),\n        loaded: true,\n      });\n    });\n  };\n\n  getRandomCard = currentCards => {\n    const card = currentCards[Math.floor(Math.random() * currentCards.length)];\n    return card;\n  };\n\n  updateCard = () => {\n    const { cards } = this.state;\n    const currentCards = cards;\n    this.setState({\n      currentCard: this.getRandomCard(currentCards),\n    });\n  };\n\n  render() {\n    const { loaded, currentCard } = this.state;\n    return (\n      <div className=\"App\">\n        <Loader loaded={loaded} top=\"35%\" scale={1.25}>\n          <div className=\"cardRow\">\n            <Card\n              sta={currentCard.sta}\n              cap={currentCard.cap}\n              img={currentCard.img}\n            />\n          </div>\n          <div className=\"buttonRow\">\n            <Draw drawCard={this.updateCard} />\n          </div>\n        </Loader>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}